<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\ME Sem 2\Device Drivers\Project\ms2\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\ME Sem 2\Device Drivers\Project\ms2\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sun Apr 21 16:49:36 2019
<BR><P>
<H3>Maximum Stack Usage =         80 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2b56b4]">Reset_Handler</a>
 <LI><a href="#[2b56f0]">__user_initial_stackheap</a>
 <LI><a href="#[2b590c]">Undef_Handler</a>
 <LI><a href="#[2b58d0]">SWI_Handler</a>
 <LI><a href="#[2b5894]">PAbt_Handler</a>
 <LI><a href="#[2b5858]">DAbt_Handler</a>
 <LI><a href="#[2b581c]">IRQ_Handler</a>
 <LI><a href="#[2b57e0]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b590c]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b590c]">Undef_Handler</a><BR>
 <LI><a href="#[2b58d0]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b58d0]">SWI_Handler</a><BR>
 <LI><a href="#[2b5894]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b5894]">PAbt_Handler</a><BR>
 <LI><a href="#[2b5858]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b5858]">DAbt_Handler</a><BR>
 <LI><a href="#[2b581c]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b581c]">IRQ_Handler</a><BR>
 <LI><a href="#[2b57e0]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b57e0]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b56b4]">Reset_Handler</a>
 <LI><a href="#[2b590c]">Undef_Handler</a>
 <LI><a href="#[2b58d0]">SWI_Handler</a>
 <LI><a href="#[2b5894]">PAbt_Handler</a>
 <LI><a href="#[2b5858]">DAbt_Handler</a>
 <LI><a href="#[2b581c]">IRQ_Handler</a>
 <LI><a href="#[2b57e0]">FIQ_Handler</a>
 <LI><a href="#[2b25f4]">__main</a>
 <LI><a href="#[2b69b0]">main</a>
 <LI><a href="#[2ae760]">__I$use$semihosting</a>
 <LI><a href="#[2b43f4]">USB_EndPoint0</a>
 <LI><a href="#[2b2f54]">USB_EndPoint2</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b56b4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b25f4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2ac168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2b24c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ac168]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b25f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2ac12c]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b24c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ac0f0]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2abf4c]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2abf4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2abf4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2abe5c]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2b16b8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[2af4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[2afb88]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2afc00]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2affc0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2afe58]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2afa98]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2afb10]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2afed0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2afde0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2b03bc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2b0218]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2b01a0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2b0128]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2b00b0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2b0038]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2b02cc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2afa5c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2aff48]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2afd68]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2b0344]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2aeaa8]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2af2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[2ade3c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2adc5c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2adc20]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2add88]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2adef0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2add10]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2b24c8]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2ac12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2b25f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2b20cc]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b1d48]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b2018]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2b16b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2b2054]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2b1f64]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2b1ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2b1fa0]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2b0f38]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b1ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[2af2dc]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2aeaa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[2af318]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2af2a0]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2aef94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2b69b0]"></a>main</STRONG> (ARM, 72 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = main &rArr; USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[2b68fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[2b6938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[2b617c]"></a>MSC_Reset</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mscuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b6140]"></a>MSC_GetMaxLUN</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mscuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b6104]"></a>MSC_MemoryRead</STRONG> (ARM, 248 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSC_MemoryRead &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b60c8]"></a>MSC_SetCSW</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[2b5d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[2b5f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[2b6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[2b6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[2b608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[2b608c]"></a>MSC_MemoryWrite</STRONG> (ARM, 284 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_MemoryWrite &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[2b6050]"></a>MSC_MemoryVerify</STRONG> (ARM, 324 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_MemoryVerify &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[2b6014]"></a>MSC_RWSetup</STRONG> (ARM, 172 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSC_RWSetup &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5fd8]"></a>DataInFormat</STRONG> (ARM, 104 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[2b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[2b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[2b5eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[2b5ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[2b5f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
</UL>

<P><STRONG><a name="[2b5f9c]"></a>DataInTransfer</STRONG> (ARM, 128 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DataInTransfer &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[2b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[2b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[2b5eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[2b5ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[2b5f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
</UL>

<P><STRONG><a name="[2b5f60]"></a>MSC_TestUnitReady</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSC_TestUnitReady &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5f24]"></a>MSC_RequestSense</STRONG> (ARM, 156 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_RequestSense &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5ee8]"></a>MSC_Inquiry</STRONG> (ARM, 308 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_Inquiry &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5eac]"></a>MSC_ModeSense6</STRONG> (ARM, 72 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ModeSense6 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5e70]"></a>MSC_ModeSense10</STRONG> (ARM, 92 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ModeSense10 &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5e34]"></a>MSC_ReadCapacity</STRONG> (ARM, 100 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ReadCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5df8]"></a>MSC_ReadFormatCapacity</STRONG> (ARM, 128 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
</UL>

<P><STRONG><a name="[2b5dbc]"></a>MSC_GetCBW</STRONG> (ARM, 788 bytes, Stack size 16 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSC_GetCBW &rArr; MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b5df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadFormatCapacity
<LI><a href="#[2b5e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ReadCapacity
<LI><a href="#[2b5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense10
<LI><a href="#[2b5eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ModeSense6
<LI><a href="#[2b5ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Inquiry
<LI><a href="#[2b5f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RequestSense
<LI><a href="#[2b5f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[2b6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[2b6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[2b5d80]"></a>MSC_BulkIn</STRONG> (ARM, 148 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_BulkIn &rArr; MSC_MemoryRead &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[2b6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[2b5d44]"></a>MSC_BulkOut</STRONG> (ARM, 172 bytes, Stack size 8 bytes, mscuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[2b6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[2b608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[2b56f0]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b455c]"></a>USB_ResetCore</STRONG> (ARM, 56 bytes, Stack size 0 bytes, usbcore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[2b4520]"></a>USB_SetupStage</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b44e4]"></a>USB_DataInStage</STRONG> (ARM, 104 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b437c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[2b43b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b44a8]"></a>USB_DataOutStage</STRONG> (ARM, 68 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b446c]"></a>USB_StatusInStage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b4430]"></a>USB_StatusOutStage</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b43f4]"></a>USB_EndPoint0</STRONG> (ARM, 1240 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[2b4124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[2b419c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[2b428c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[2b42c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2b4304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[2b4340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[2b437c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[2b43b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[2b4430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[2b446c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[2b44a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[2b44e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[2b4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetMaxLUN
<LI><a href="#[2b617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[2b37c4]"></a>EPAdr</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2b40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2b40e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[2b4214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[2b428c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[2b3788]"></a>WrCmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b35a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
<LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[2b374c]"></a>WrCmdDat</STRONG> (ARM, 84 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b35e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp
<LI><a href="#[2b4034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[2b4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2b40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2b40e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[2b41d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[2b428c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b6938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>

<P><STRONG><a name="[2b3710]"></a>RdCmdDat</STRONG> (ARM, 56 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b35a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2b4034]"></a>USB_SetAddress</STRONG> (ARM, 56 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[2b68fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[2b36d4]"></a>USB_Reset</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
<LI><a href="#[2b68fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[2b3698]"></a>USB_Resume</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2b365c]"></a>USB_Suspend</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2b3620]"></a>USB_ISR</STRONG> (ARM, 400 bytes, Stack size 40 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b34b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend_Event
<LI><a href="#[2b34f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Resume_Event
<LI><a href="#[2b3530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
<LI><a href="#[2b365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[2b3698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Resume
<LI><a href="#[2b36d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[2b3710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[2b3788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[2b68fc]"></a>USB_Init</STRONG> (ARM, 208 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[2b36d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[2b4034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2b69b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b6938]"></a>USB_Connect</STRONG> (ARM, 52 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b69b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b35e4]"></a>USB_WakeUp</STRONG> (ARM, 40 bytes, Stack size 4 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>

<P><STRONG><a name="[2b3fbc]"></a>USB_WakeUpCfg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
</UL>

<P><STRONG><a name="[2b41d8]"></a>USB_Configure</STRONG> (ARM, 96 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[2b4214]"></a>USB_ConfigEP</STRONG> (ARM, 112 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b42c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2b4304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[2b4124]"></a>USB_DirCtrlEP</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b40ac]"></a>USB_EnableEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b42c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2b4304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[2b40e8]"></a>USB_DisableEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b42c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2b4304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[2b4070]"></a>USB_ResetEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b42c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2b4304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[2b5c90]"></a>USB_SetStallEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[2b5d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
<LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[2b5f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[2b6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[2b6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[2b608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
</UL>

<P><STRONG><a name="[2b428c]"></a>USB_ClrStallEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b5ccc]"></a>USB_ReadEP</STRONG> (ARM, 176 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[2b3788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[2b44a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[2b4520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
</UL>

<P><STRONG><a name="[2b5c54]"></a>USB_WriteEP</STRONG> (ARM, 144 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[2b3788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[2b37c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b446c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[2b44e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[2b6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[2b35a8]"></a>USB_GetFrame</STRONG> (ARM, 48 bytes, Stack size 4 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[2b3788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[2b3530]"></a>USB_Reset_Event</STRONG> (ARM, 28 bytes, Stack size 8 bytes, usbuser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b455c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2b34b8]"></a>USB_Suspend_Event</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2b34f4]"></a>USB_Resume_Event</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2b419c]"></a>USB_Configure_Event</STRONG> (ARM, 48 bytes, Stack size 0 bytes, usbuser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b2f90]"></a>USB_EndPoint1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2f54]"></a>USB_EndPoint2</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_EndPoint2 &rArr; MSC_BulkOut &rArr; MSC_GetCBW &rArr; MSC_ReadFormatCapacity &rArr; DataInFormat &rArr; MSC_SetCSW &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkOut
<LI><a href="#[2b5d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BulkIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[2b2f18]"></a>USB_EndPoint3</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2edc]"></a>USB_EndPoint4</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2ea0]"></a>USB_EndPoint5</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2e64]"></a>USB_EndPoint6</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2e28]"></a>USB_EndPoint7</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2dec]"></a>USB_EndPoint8</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2db0]"></a>USB_EndPoint9</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2d74]"></a>USB_EndPoint10</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2d38]"></a>USB_EndPoint11</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2cfc]"></a>USB_EndPoint12</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2cc0]"></a>USB_EndPoint13</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2c84]"></a>USB_EndPoint14</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b2c48]"></a>USB_EndPoint15</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2b29b4]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[2b5f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_TestUnitReady
<LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b5fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInFormat
<LI><a href="#[2b6014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_RWSetup
<LI><a href="#[2b6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[2b608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[2b6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[2b2978]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2b2888]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[2b5dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_GetCBW
<LI><a href="#[2b5f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataInTransfer
<LI><a href="#[2b6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryVerify
<LI><a href="#[2b608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryWrite
<LI><a href="#[2b60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_SetCSW
<LI><a href="#[2b6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_MemoryRead
</UL>

<P><STRONG><a name="[2b284c]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2b275c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b2720]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b26e4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b1c1c]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[2b56f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2b1ab4]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[2b1a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2b1064]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2b1028]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b0fec]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2aef94]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2ae760]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2ae724]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b43b8]"></a>USB_GetDescriptor</STRONG> (ARM, 340 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_GetDescriptor &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b44e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b437c]"></a>USB_GetStatus</STRONG> (ARM, 356 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b44e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b4340]"></a>USB_SetClrFeature</STRONG> (ARM, 388 bytes, Stack size 16 bytes, usbcore.o(i.USB_SetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetClrFeature &rArr; USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[2b428c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[2b5c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b4304]"></a>USB_SetConfiguration</STRONG> (ARM, 644 bytes, Stack size 24 bytes, usbcore.o(i.USB_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_SetConfiguration &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2b40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2b40e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[2b41d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[2b4214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b42c8]"></a>USB_SetInterface</STRONG> (ARM, 452 bytes, Stack size 40 bytes, usbcore.o(i.USB_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[2b40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2b40e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[2b4214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b43f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2af4f8]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2af4bc]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[2b16b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2b590c]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2b590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b58d0]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2b58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b5894]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2b5894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b5858]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2b5858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b581c]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2b581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b57e0]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2b57e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b57e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2b1a3c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b1ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
